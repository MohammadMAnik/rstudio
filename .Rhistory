getwd()
data <- read.csv(file = "rstudio/dataset/semdata.csv", header = TRUE)
head(data)
library(lavaan)
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8
cs ~ price + service + atm
cl ~ cs'
semdata <- read.csv(file = "rstudio/dataset/semdata.csv", header = TRUE)
rm(data)
fit <- sem(model, data = semdata)
summary(fit, fit.measures = TRUE)
rm(list=ls())
getwd()
tess <- load(file = "dataset/TESS2_089_Trawalter_Client_csv.csv", header = TRUE)
tess <- read.csv(file = "dataset/TESS2_089_Trawalter_Client_csv.csv", header = TRUE)
tess <- read.csv("dataset/TESS2_089_Trawalter_Client_csv.csv", header = TRUE)
getwd()
tess <- read.csv(file = "rstudio/dataset/TESS2_089_Trawalter_Client_csv.csv", header = TRUE)
tess <- read.csv("rstudio/dataset/TESS2_089_Trawalter_Client_csv.csv", header = TRUE)
tess <- read.csv(file = "rstudio/dataset/TESS2_089_Trawalter_Client.csv", header = TRUE)
dim(tess)
class(tess)
colnames(tess)
head(tess)
gender.2 <- tess[, tess$PPGENDER == 2]
gender.2 <- tess[tess$PPGENDER == 2,]
head(gender.2)
dim(gender.2)
gender.2 <- tess[, c(Q1:Q10)]
gender.2 <- tess[, c('Q1':'Q10')]
gender.2 <- gender.2[, c(Q1:Q10)]
gender.2q <- c('Q1', 'Q2', 'Q3', 'Q4', 'Q5')
gender.2 <- gender.2[, gender2q]
gender.2 <- gender.2[, gender.2q]
dim(gender.2)
head(gender.2)
gender.1 <- tess[tess$PPGENDER == 1,]
gender.1 <- gender.1[, gender.2q]
head(gender1)
head(gender.1)
t.test(gender.1, gender.2)
mean(gender.1)
mean(gender.1$Q1)
sum(gender.1$Q1)
want.var <- c('Q1', 'Q2', 'Q3', 'Q4', 'Q5')
survey <- tess[, want.var]
dim(survey)
want.var <- c('PPGENDER', 'Q1', 'Q2', 'Q3', 'Q4', 'Q5')
survey <- tess[, want.var]
survey2 <- tess[(tess$PPGENDER == 2), ]
head(survey2)
survey2 <- tess[(tess$PPGENDER == 2), want.var]
head(survey2)
survey1 <- tess[(tess$PPGENDER == 1), want.var]
t.test(survey1, survey2)
rm = (list = ls())
rm = (list = ls())
rm = (list = ls())
rm(list = ls(all = TRUE))
Job <- scan()
55.6 83.3 43.4 58.1 31.6 55.6 60.7 64.6 73.3 55.6 64.3
52.8 22.7 46.3 71.4 53.8 64.5 67.9 71.4 80.0 59.5 40.5
77.1 58.6 65.4 52.4 66.7 91.3 41.3 72.1 61.9 78.4 63.6
41.0 65.2 81.3 54.8 19.6 50.0 53.1 41.2 56.5
Job <- scan()
n <- length(Job)
# ????
total <- sum(Job)
n
totla
total
total/n
mean(Job)
mean(Job)
# ?߾Ӱ?
median(Job)
# ????????
mean(Job,trim=0.1)
mean(Job,trim=0)
mean(Job,trim=0.5)
1:3
1:5
# ???????跮
Job <- sort(Job)
trim <- c(1:3, (n-2):n)
mean(Job[-trim])
# ?ֺ???
mode(Job)    #???
# ?ֺ???
mode(Job)    #???
freq <- table(Job)
freq
freq
maxfreq <- max(freq)
maxfreq
which(freq == maxfreq)
which(freq == maxfreq)
rm(maxfreq)
which(freq == maxfreq)
maxfreq <- max(freq)
which(freq == maxfreq)
### ????
# ??��
ends <- range(Job)
diff(ends)
ends
max(Job)-min(Job)
# ????��??
quantile(Job)
Q <- quantile(Job,probs=c(0.25,0.5, 0.75))
Q
IQR(Job)
Q[3]-Q[1]
# ???ڱ׸?
boxplot(Job)
boxplot(Job,horizontal=TRUE,xlab="??????")
### ?????? ????
# ?ֵ? & ÷??
skewness <- sum(z^3)/(n-1)
kurtosis <- sum(z^4)/(n-1)
var(Job)
sd(Job)
# ǥ??ȭ
xbar <- mean(Job)
s <- sd(Job)
z <-(Job-xbar)/s
# ????????????
abdev <- abs(Job-median(Job))
sum(abdev)/(n-1)   # sum(abs(Job-median(Job)))/(n-1)
# ????????
sd(Job)/mean(Job)
### ?????? ????
# ?ֵ? & ÷??
skewness <- sum(z^3)/(n-1)
kurtosis <- sum(z^4)/(n-1)
skewness
kurtosis
dist.shape <- function(x)
{
n <- length(x)
result <- c(NA,NA)
if (n >= 2)
{
z <- (x-mean(x))/sd(x)
skew <- sum(z^3)/(n-1)
kurt <- sum(z^4)/(n-1)
result <- c(skew,kurt)
}
return(result)
}
dist.shape(x)
dist.shape(Job)
dist.shape(z)
dist.shape(Job)
dist.shape <- function(x)
{
n <- length(x)
result <- c(NA,NA)
if (n >= 2)
{
z <- (x-mean(x))/sd(x)
skew <- sum(z^3)/(n-1)
kurt <- sum(z^4)/(n-1)-3
result <- c(skew,kurt)
}
return(result)
}
dist.shape(Job)
dist.shape <- function(x)
{
n <- length(x)
result <- c(NA,NA)
if (n >= 2)
{
z <- (x-mean(x))/sd(x)
skew <- sum(z^3)/(n-1)
kurt <- sum(z^4)/(n-1)
result <- c(skew,kurt)
}
return(result)
}
dist.shape(Job)
heat.colors()
hit.txt
library("jmv", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:jmv", unload=TRUE)
# one-sample t-test
rm(list())
# one-sample t-test
rm(list=ls)
# one-sample t-test
rm(list=(ls))
# one-sample t-test
rm(list(ls))
# one-sample t-test
rm(ls=list)
# one-sample t-test
rm(list = ())
# one-sample t-test
rm(list = ls)
# one-sample t-test
rm(gender.1)
# one-sample t-test
rm(ls(list))
# one-sample t-test
rm(ls)
# one-sample t-test
rm(list = ls)
# one-sample t-test
rm(list=ls())
# 02_two groups
getwd()
# one-sample t-test
LungCapData <- read.table("rstudio/dataset/LungCapData.txt", header = TRUE, sep = "\t")
names(LungCapData)
class(LungCapData)
help(t.test)
boxplot(LungCapData)
# t-test command
# LungCapData$LungCap
# Ho : mu >=8, Ha : mu < 8
# one-sided 95% confidence
t.test(LungCap, mu = 8)
boxplot(LungCap)
# t-test command
# LungCapData$LungCap
# Ho : mu >=8, Ha : mu < 8
# one-sided 95% confidence
t.test(LungCapData$LungCap, mu = 8)
dim(LungCapData)
# t-test command
# LungCapData$LungCap
# Ho : mu >=8, Ha : mu < 8
# one-sided 95% confidence
t.test(LungCapData$LungCap, mu >= 8)
# t-test command
# LungCapData$LungCap
# Ho : mu >=8, Ha : mu < 8
# one-sided 95% confidence
t.test(LungCapData$LungCap, mu = 8)
# t-test command
# LungCapData$LungCap
# Ho : mu >=8, Ha : mu < 8
# one-sided 95% confidence
t.test(LungCapData$LungCap, mu = 8, alternative = "less", conf.level = 0.95)
# two-sided
t.tes(LungCapData$LungCap, mu = 8, alt = "two.sided", conf = 0.95)
# two-sided
t.test(LungCapData$LungCap, mu = 8, alt = "two.sided", conf = 0.95)
# two-sided test is the default in R
t.test(LungCapData$LungCap, mu = 8, conf = 0.95)
t.test(LungCapData$LungCap, mu = 8, conf = 0.99)
TEST <- t.test(LungCapData$LungCap, mu = 8, conf = 0.99)
TEST
attributes(TEST)
TEST$statistic
TEST$p.value
TEST$conf.int
rm(TEST)
# Levene's test command
# Ho : population variances are equal
# to use this test one must have the CAR
library(car)
# We will be exploring the relationship between Smoking and Lung Capacity.
# Ho : mean lung cap of smokers = of non smokers
# two-sided test
# assume non-equal variance
LungCap <- LungCapData$LungCap
Smoke <- LungCapData$Smoke
# We would like to compare variations in Lung Capacities separated by the Smoking status
leveneTest(LungCap ~ Smoke)
# Here we can see that with a small P value.
# We should reject the null hypothesis and conclude that we have evidence to believe population variances are
# not equal and use the non-equal assumption
t.test(LungCap ~ Smoke)
# same argument
t.test(LungCap ~ Smoke, mu = 0, alt = "two.sided", conf = 0.95, var.eq = F, paired = F)
# two separate groups we would like compared
t.test(LungCap[Smoke == "no"], LungCap[Somke == "yes"])
View(LungCapData)
# two separate groups we would like compared
t.test(LungCap[Smoke == "no"], LungCap[Smoke == "yes"])
var(LungCap[Smoke == "no"])
var(LungCap[Smoke == "yes"])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
summary(cars)
load("/Users/kimjongha/Downloads/diamonds.rda")
View(diamonds)
knitr::opts_chunk$set(echo = TRUE)
plot(diamonds)
rm(diamonds)
rm(list=ls())
# two-sample t-test
# independent groups
getwd()
setwd("~/Documents/github/rstudio")
# two-sample t-test
# independent groups
LungCapData <- read.table("dataset/LungCapData.txt", sep = '\,', header = TRUE)
# two-sample t-test
# independent groups
LungCapData <- read.table("dataset/LungCapData.txt", sep = '\t', header = TRUE)
LungCap <- LungCapData$LungCap
Smoke <- LungCapData$Smoke
# normality test
# Shapiro-Wilk normality test
shapiro.test(LungCap)
shapiro.test(Smoke)
# normality test
# Shapiro-Wilk normality test
shapiro.test(LungCap)
# Bartlett's Test for equality of variance
bartlett.test(LungCap ~ Smoke)
# We would like to compare variations in Lung Capacities separated by the Smoking status
# Levene's Test for equality of variances
leveneTest(LungCap ~ Smoke)
# Levene's test command
# Ho : population variances are equal
# to use this test one must have the CAR
library(car)
# We would like to compare variations in Lung Capacities separated by the Smoking status
# Levene's Test for equality of variances
leveneTest(LungCap ~ Smoke)
# Kolmogorov-Smirnov Test
ks.test(LungCap)
# Kolmogorov-Smirnov Test
ks.test(LungCap, Smoke)
View(LungCapData)
# Kolmogorov-Smirnov Test
ks.test(LungCap, Height)
