plot(mpg)
head(mtcars)
attach(mtcars)
plot(mpg)
plot(cyl)
plot(mpg ~ cyl)
?mtcars
plot(wt ~ cyl)
plot(mpg ~ cyl)
aov(mpg ~ cyl)
aov(mpg ~ as.factor(cyl))
summary(av)
av <- aov(mpg ~ as.factor(cyl))
summary(av)
# data = baskball
baskball
# data = baskball
data(baskball)
Time <- c("Morning", "Morning", "Night", "Night", "Morning", "Morning", "Night", "Night", "Morning", "Morning", "Night", "Night", "Morning", "Morning", "Nigth", "Night")
Shoes <- c("Others", "Others", "Others", "Others", "Favorite", "Favorite", "Favorite", "Favorite", "Others", "Others", "Others", "Others", "Favorite", "Favorite", "Favorite", "Favorite")
Made <- c(25, 26, 27, 27, 32, 22, 30, 34, 35, 34, 33, 30, 33, 37, 36, 38)
baskball <- cbind(Time, Shoes, Made)
baskball
plot(Made)
int <- aov(Made ~ Time*Shoes)
summary(int)
noint <- aov(Made ~ Time + Shoes)
summary(noint)
tapply(Made, Time, mean)
tapply(Maed, Shoew, mean)
tapply(Made, Shoes, mean)
tapply(Made, Time, mean)
# baskball, typing
Time <- c("Morning", "Morning", "Night", "Night", "Morning", "Morning", "Night", "Night", "Morning", "Morning", "Night", "Night", "Morning", "Morning", "Night", "Night")
baskball <- cbind(Time, Shoes, Made)
int <- aov(Made ~ Time*Shoes)
summary(int)
noint <- aov(Made ~ Time + Shoes)
summary(noint)
tapply(Made, Time, mean)
tapply(Made, Shoes, mean)
# diagnostic plots
plot(av)
# diagnostic plots
plot(av)
summary(av)
# multiple comparison
# TukeyHSD : Tukey's honestly significant differences
TukeyHSD(av)
cyl
# multiple comparison
# TukeyHSD : Tukey's honestly significant differences
mc <- TukeyHSD(av)
mc
plot(mc, las = "2")
# multiple comparison
# TukeyHSD : Tukey's honestly significant differences
(mc <- TukeyHSD(av))
plot(mc, las = "2")
plot(mc, las = "1")
plot(mc, las = "1")
plot(mc, las = "3")
plot(mc, las = "2")
# boxplot
boxplot(mpg ~ cyl)
# boxplot
boxplot(mpg ~ cyl, xlab = "Cylinders", ylab = "Miles per gallon")
# interaction.plot
gear
interaction.plot(cyl, gear, mpg, type = "b", col = c(1:3), pch = c(1:3), legend = TRUE)
# interaction.plot
gear <- factor(gear)
cyl <- factor(cyl)
interaction.plot(cyl, gear, mpg, type = "b", col = c(1:3), pch = c(1:3), legend = TRUE)
# plotmeans
# package = gplots
plotmeans(mpg ~ cyl)
# plotmeans
# package = gplots
library(gplots)
# plotmeans
# package = gplots
install.packages("gplots")
library(gplots)
plotmeans(mpg ~ cyl)
plotmeans(mpg ~ cyl, title = "cyl mean")
plotmeans(mpg ~ cyl, title = "cyl mean")
plotmeans(mpg ~ cyl)
rm(list=ls())
?longley
str(longley)
cor(longley)
paris(longley)
pairs(longley)
# Spearman's correlation
cor(longley, method="spearman")
# Kendall's correlation
cor(longley, method="kendall")
# Kendall's correlation
round(cor(longley, method="kendall"), 1)
# data = cats
library(MASS)
str(cats)
?cats
summary(cats)
with(cats, plot(Bwt, Hwt))
title(main = "Heart Weight (g) vs. Body Weight (kg) \nof Domestic Cats")
# cor.test
with(cats, cor(Bwt, Hwt))
with(cats, cor(Bwt, Hwt))^2
# cor.test
with(cats, cor.test(Bwt, Hwt))
# cor.test, Sex==Female
with(cats, cor.test(Bwt, Hwt, subset=(Sex=="F")))
# cor.test, Sex==Female
with(cats, cor.test(~ Bwt + Hwt, subset=(Sex=="F")))
with(cats, cor.test(~ Bwt + Hwt, subset=(Sex=="M")))
# scatter plot
with(cats, plot(Bwt, Hwt, type = "n", xlab = "Body Weight in kg", ylab = "Heart Weight in g",
main = "Heart Weight vs. Body Weight of Cats"))
# scatter plot
with(cats, plot(Bwt, Hwt, xlab = "Body Weight in kg", ylab = "Heart Weight in g",
main = "Heart Weight vs. Body Weight of Cats"))
# scatter plot
with(cats, plot(Bwt, Hwt, type = "n", xlab = "Body Weight in kg", ylab = "Heart Weight in g",
main = "Heart Weight vs. Body Weight of Cats"))
with(cats, points(Bwt[Sex=="F"], Hwt[Sex=="F"], pch=16, col="red"))
with(cats, points(Bwt[Sex=="M"], Hwt[Sex=="M"], pch=17, col="blue"))
# correlation visualization
library(psych)
# pairs.panels()
# data = iris
data(iris)
pairs.panels(iris[1:4], scale = TRUE)
pairs.panels(iris[1:4], scale = FALSE)
pairs.panels(iris[1:4], scale = TRUE)
pairs.panels(iris, scale = TRUE)
# Species
pairs.panels(iris[1:4], bg=c("red", "yellow", "blue")[iris$Species], pch=21, main="Fisher Iris data by Sepcies")
iris$Species
iris[96,]
# cor.plot()
cor.plot(cor(mtcars))
head(mtcars)
rm(iris)
# regressio analysis
# simple linear regression
attach(cats)
lm(Hwt ~ Bwt)
lm.out <- lm(Hwt ~ Bwt)
summary(lm.out)
# except stars
options(show.signif.stars = FALSE)
summary(lm.out)
anova(lm.out)
# plot
plot(Hwt ~ Bwt, main="Kitty Cat Plot")
abline(lm.out, col = "red")
plot(Hwt ~ Bwt)
plot(Hwt, Bwt)
str(cats)
# plot
plot(Bwt, Hwt, main="Kitty Cat Plot")
# plot
plot(Hwt ~ Bwt, main="Kitty Cat Plot")
plot(lm.out)
rm(lm.out)
# regression analysis
# simple linear regression
attach(cats)
plot(Hwt ~ Bwt, main="Kitty Cat Plot")
plot.new(Hwt ~ Bwt, main="Kitty Cat Plot")
plot(Hwt, Bwt, main="Kitty Cat Plot")
lm(Hwt ~ Bwt)
lm.out <- lm(Hwt ~ Bwt)
summary(lm.out)
options(show.signif.stars = FALSE)
anova(lm.out)
abline(lm.out)
cats[144,]
plot(cooks.distance(lm.out)
plot(cooks.distance(lm.out))
detach("package:psych", unload=TRUE)
anova(lm.out)
plot(lm.out)
rlm(Hwt ~ Bwt)
plot(Hwt ~ Bwt)
lines(lowess(Hwt ~ Bwt), col = "red")
scatter.smooth(Hwt ~ Bwt)
# multiple linear regression
rm(lm.out)
# multiple linear regression
# multiple correlation coefficient, multiple R^2
# multicollinearity
data(state)
st <- as.data.frame(state.x77)
str(st)
colnames(st)[4]
st[,4]
colnames(st)[4] <- "Life.Exp"
colnames(st)[6] <- "HS.Grad"
colnames(st)[9] <- "Density"
st[,9] <- st$Population*1000/st$Area
colnames(st)[9] <- "Density"
str(st)
summary(st)
cor(st)
pairs(st)
# multiple linear regression
lm(Life.Exp ~ ., data = st)
# multiple linear regression
model1 <- lm(Life.Exp ~ ., data = st)
summary(model1)
rm(list=ls())
# multiple linear regression
# multiple correlation coefficient, multiple R^2
# multicollinearity
data(state)
st <- as.data.frame(state.x77)
str(st)
colnames(st)[4] <- "Life.Exp"
colnames(st)[6] <- "HS.Grad"
st[,9] <- st$Population*1000/st$Area
colnames(st)[9] <- "Density"
str(st)
summary(st)
cor(st)
pairs(st)
# multiple linear regression
model1 <- lm(Life.Exp ~ ., data = st)
summary(model1)
# multiple linear regression
model11 <- lm(Life.Exp ~ ., data = st)
summary(model11)
model.step <- step(model11, direction = "backward")
summary(model.step)
confint(model.step)
predict(model.step, list(Population=4000, Murder=10.5, HS.Grad=48, Frost=100))
plot(model.step)
# crosstable
chisq.test(c(25, 32, 28, 20))
HairEyeColor
Eye <- margin.table(HairEyeColor, 2)
Eye
chisq.test(Eye, p=c(.5, .25, .15, .1))
HairEye <- margin.table(HairEyeColor, c(1,2))
HairEye
chisq.test(HairEye)
# crosstable
str(esoph)
# xtabs()
xtabs(cbind(ncases, ncontrols) ~ ., data = esoph)
# package = dplyr
# data = hflights
rm(list=ls())
# data = Prestige
# correlation, regression
library(car)
data(Prestige)
str(Prestige)
head(Prestige)
summary(Prestige)
# correlation visualization
plot(Prestige[,1:4], pch=15, col="blue")
# pairs.panel{psych}
library(psych)
pairs.panels(Prestige[,1:4], scale=TRUE)
pairs.pandels(Prestige[1:4], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
pairs.pandls(Prestige[1:4], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
pairs.panels(Prestige[1:4], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
pairs.panels(Prestige[,1:4], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
pairs.panels(Prestige[1:4,], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
pairs.panels(Prestige[,1:4], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
pairs.panels(Prestige[,1:4], scale=TRUE)
pairs.panels(Prestige[,1:4], bg=c("red", "yellow", "blue")[Prestige$type], pch=21)
# model
mod1 <- lm(income ~ education + prestige + women, data = Prestige)
summayr(mod1)
summay(mod1)
summary(mod1)
mod2 <- lm(income ~ prestige + women, data = Prestige)
summary(mod2)
plot(mod2, pch = 16, which = 1)
Prestige$type
Prestige$prestige
Prestige$census
# outlier test
data(mtcars)
fit <- lm(mpg ~ disp + hp + wt + drat, data = mtcars)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
# outlier test
library(car)
outlierTest(fit)
qqPlot(fit, main = "QQ Plot")
# leverage plot
leveragePlots(fit)
#
avPlots(fit)
# cook's distance
cutoff <- 4/((nrow(mtcars)-length(fit$coefficients)-2))
plot(fit, which = 4, cook.levels = cutoff)
# regression influence
influencePlot(fit, id.method = "identify", main = "Influence Plot",
sub = "Circle size is proportial to Cook's Distance")
rm(list=ls())
name <- c("a", "b", "c", "d", "e")
name
var <- c(1, 2, 3, 4, 5)
x <- c(name, var)
x
x <- cbind(name, var)
x
y <- c(6, 7, 8, 9, 10)
# y를 열로 추가할 때
z <- cbind(x, y)
z
# 순서를 다르게 하면
z <- cbind(z, x, y)
z
# 순서를 다르게 하면
z <- cbind(y, x)
z
# row bind
rm(list=ls())
var <- c(1, 2, 3, 4, 5)
name <- c(a, b, c, d, e)
name <- c(a, b, c, d, e)
name <- c(a, b, c, d, e)
var <- c(1, 2, 3, 4, 5)
name <- c("a", "b", "c", "d", "e")
x <- cbind(name, var)
name <- c("f", "g", "h", "i", "j")
var <- c(6, 7, 8, 9, 10)
y <- cbind(name, var)
z <- rbind(x, y)
z
name <- c("x", "y", "z")
var <- c(100, 200, 300)
a <- cbind(name, var)
a
# a를 z의 7행과 8행 사이에 넣을려면
z <- rbind(z[c(1:7),], a, z[c(8:10),])
z
z
rm(list=ls())
rm=list()
rm=list(ls)
rm=list(ls())
rm(list=ls())
# rm(list=ls())
library(dplyr)
airquality
str(airquality)
class(airquality)
summary(airquality)
filter(airquality, Month == 6)
air <- filter(airquality, Month == 6)
head(air)
filter(airquality, Month == 6, Temp > 90)
filter(airquality, Month == 6 & Temp > 90)
filter(airquality, Month == 6 | Temp > 90)
count(filter(airquality, Month == 6 | Temp > 90))
air <- filter(airquality, Month == 6 | Temp > 90)
air
head(air)
slice(airquality, 6:10)
# sorting
arrange(airquality, Temp, Month, Day)
air <- arrange(airquality, desc(Temp), Month, Day)
air
# select()
air <- select(airqulity, Month, Day, Temp)
# select()
air <- select(airquality, Month, Day, Temp)
air
air <- select(airquality, -(Ozone:Wind))
air
air
# rename()
air <- rename(airquality, Solar=Solar.R)
air
# distinct()
distinct(selec(airquality, Month))
# distinct()
distinct(select(airquality, Month))
# mutate()
air <- mutate(airquality, Temp.C=(Temp-32)/1.8, Diff=Temp.C - mean(Temp.C))
head(air)
# summarise()
air <- summarise(airquality, mean(Temp))
air
# Temp
air <- summarise(airquality,
Min = min(Temp, na.rm = TRUE),
Median = median(Temp, na.rm = TRUE),
Mean = mean(Temp, na.rm = TRUE),
SD = sd(Temp, na.rm = TRUE),
Max = max(Temp, na.rm = TRUE),
N = n(),
)
air
round(air, 1)
# Temp
air <- round(summarise(airquality,
Min = min(Temp, na.rm = TRUE),
Median = median(Temp, na.rm = TRUE),
Mean = mean(Temp, na.rm = TRUE),
SD = sd(Temp, na.rm = TRUE),
Max = max(Temp, na.rm = TRUE),
N = n(),
), 1)
air
# Temp
air <- summarise(airquality,
Min = min(Temp, na.rm = TRUE),
Median = median(Temp, na.rm = TRUE),
Mean = mean(Temp, na.rm = TRUE),
SD = sd(Temp, na.rm = TRUE),
Max = max(Temp, na.rm = TRUE),
N = n(),
Distinct.Month = n_distinct(Month),
First.Month = first(Month),
Last.Month = last(Month))
air
# pipe operator
iris %>% head
air <- airquality %>% select(Ozone, Temp, Month) %>% group_by(Month) %>%
summarise(Mean.Ozone = mean(Ozone, na.rm = TRUE),
Mean.Temp = mean(Temp, na.rm = TRUE))
air
air <- airquality %>% select(Ozone, Temp, Month) %>% group_by(Month) %>%
summarise(Mean.Ozone = mean(Ozone, na.rm = TRUE),
Mean.Temp = mean(Temp, na.rm = TRUE)) %>% filter(Mean.Ozone > 40 | Mean.Temp > 80)
air
round(air, 2)
sys.getlocale()
sys.getlocale()
Sys.getlocale()
Sys.getlocale("LC_ALL", "English_United States.1252")
Sys.getlocale("LC_ALL", "English_United States.1252")
Sys.getlocale()
Sys.getlocale()
# 집단요약
mtcars
car <- within(car, am <- factor(am, levels = c(0, 1), labels = c("Automatic", "Manual")))
car <- within(car, am <- factor(am, levels = c(0, 1), labels = c("Automatic", "Manual")))
car <- mtcars
car <- within(car, am <- factor(am, levels = c(0, 1), labels = c("Automatic", "Manual")))
# split()
gear <- split(x=car$mpg, f=car$am)
gear
sapply(gear, mean)
sapply(gear, count)
sapply(gear, length)
sapply(gear, length)
# unstack()
unstack(data.frame(car$mpg, car$am))
# iris
iris
head(iris)
# rowsum
rowsum(x=iris[-5], group = iris$Species)
# rowsum
rowmean(x=iris[-5], group = iris$Species)
# rowsum
rowsumn(x=iris[-5], group = iris$Species)
# rowsum
rowsum(x=iris[-5], group = iris$Species)
# table
table(car$gear)
table(car$am)
table(car$am, car$gear)
rm = air
rm = list(air)
rm ?
rm?
rm??
help(rm)
help('rm')
rm(air)
rm(car)
rm(gear)
rm(rm)
setwd("~/Documents/github/rstudio/ggplot2")
getwd()
library(ggplot2)
mpg
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy, colour = class)) + gemo_point()
ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point()
ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point(colour = "blue")
ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~ class)
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~ class)
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth()
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(se = FALSE)
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(span = 0.2)
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(span = 1)
library(mgcv)
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = "gam", formula = y ~ s(x))
# method = lm
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = "lm")
ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# 2.6.2 Boxplot and Jittered Points
ggplot(mpg, aes(drv, hwy)) + geom_point()
ggplot(mpg, aes(drv, hwy)) + geom_jitter()
ggplot(mpg, aes(drv, hwy)) + geom_boxplot()
ggplot(mpg, aes(drv, hwy)) + geom_vilin()
ggplot(mpg, aes(drv, hwy)) + geom_violin()
